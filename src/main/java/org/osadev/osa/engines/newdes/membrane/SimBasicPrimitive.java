/*
 * Generated by org.objectweb.fractal.koch.mc.MembraneCompiler on: Fri Nov 20 16:10:09 CET 2015
 */
package org.osadev.osa.engines.newdes.membrane;

import org.objectweb.fractal.api.Component;
import org.objectweb.fractal.api.type.ComponentType;
import org.objectweb.fractal.api.type.InterfaceType;
import org.objectweb.fractal.util.Fractal;
import org.objectweb.fractal.api.NoSuchInterfaceException;

/**
 * Implementation of the SimBasicPrimitive membrane factory component.
 *
 * @author Lionel Seinturier <Lionel.Seinturier@lifl.fr>
 * @since 2.5
 */
public class SimBasicPrimitive implements org.objectweb.fractal.api.factory.Factory, org.objectweb.fractal.api.control.BindingController {

  public Object getFcContentDesc() {
    throw new java.lang.UnsupportedOperationException();
  }

  public Object getFcControllerDesc() {
    throw new java.lang.UnsupportedOperationException();
  }

  public Component newFcInstance() throws org.objectweb.fractal.api.factory.InstantiationException {
    try {
      // --------------------------------------------------
InterfaceType IT0 = typeFactory.createFcItfType("///membrane-controller", "org.objectweb.fractal.koch.control.membrane.MembraneController", false, false, false);
ComponentType CT0 = typeFactory.createFcType(new InterfaceType [] { IT0 });
Component C0 = genericFactory.newFcInstance(CT0, "mPrimitive", "'membrane-controller-impl");
try { Fractal.getNameController(C0).setFcName("MC"); } catch (NoSuchInterfaceException ignored) { }
Fractal.getLifeCycleController(C0).startFc();
InterfaceType IT1 = typeFactory.createFcItfType("//component", "org.objectweb.fractal.api.Component", false, false, false);
ComponentType CT1 = typeFactory.createFcType(new InterfaceType [] { IT1 });
Component C1 = genericFactory.newFcInstance(CT1, "mPrimitive", "'component-impl");
try { Fractal.getNameController(C1).setFcName("Comp"); } catch (NoSuchInterfaceException ignored) { }
Fractal.getLifeCycleController(C1).startFc();
InterfaceType IT2 = typeFactory.createFcItfType("//name-controller", "org.objectweb.fractal.api.control.NameController", false, false, false);
ComponentType CT2 = typeFactory.createFcType(new InterfaceType [] { IT2 });
Component C2 = genericFactory.newFcInstance(CT2, "mPrimitive", "'name-controller-impl");
try { Fractal.getNameController(C2).setFcName("NC"); } catch (NoSuchInterfaceException ignored) { }
Fractal.getLifeCycleController(C2).startFc();
InterfaceType IT3 = typeFactory.createFcItfType("//lifecycle-controller", "org.objectweb.fractal.julia.control.lifecycle.LifeCycleCoordinator", false, false, false);
InterfaceType IT4 = typeFactory.createFcItfType("//component", "org.objectweb.fractal.api.Component", true, false, false);
ComponentType CT3 = typeFactory.createFcType(new InterfaceType [] { IT3, IT4 });
Component C3 = genericFactory.newFcInstance(CT3, "mPrimitive", "'lifecycle-controller-impl");
try { Fractal.getNameController(C3).setFcName("LC"); } catch (NoSuchInterfaceException ignored) { }
InterfaceType IT5 = typeFactory.createFcItfType("//binding-controller", "org.objectweb.fractal.api.control.BindingController", false, false, false);
InterfaceType IT6 = typeFactory.createFcItfType("//component", "org.objectweb.fractal.api.Component", true, false, false);
InterfaceType IT7 = typeFactory.createFcItfType("//super-controller", "org.objectweb.fractal.julia.control.content.SuperControllerNotifier", true, false, false);
InterfaceType IT8 = typeFactory.createFcItfType("//lifecycle-controller", "org.objectweb.fractal.julia.control.lifecycle.LifeCycleCoordinator", true, false, false);
ComponentType CT4 = typeFactory.createFcType(new InterfaceType [] { IT5, IT6, IT7, IT8 });
Component C4 = genericFactory.newFcInstance(CT4, "mPrimitive", "'container-binding-controller-impl");
try { Fractal.getNameController(C4).setFcName("BC"); } catch (NoSuchInterfaceException ignored) { }
InterfaceType IT9 = typeFactory.createFcItfType("//super-controller", "org.objectweb.fractal.julia.control.content.SuperControllerNotifier", false, false, false);
ComponentType CT5 = typeFactory.createFcType(new InterfaceType [] { IT9 });
Component C5 = genericFactory.newFcInstance(CT5, "mPrimitive", "'super-controller-impl");
try { Fractal.getNameController(C5).setFcName("SC"); } catch (NoSuchInterfaceException ignored) { }
Fractal.getLifeCycleController(C5).startFc();
InterfaceType IT10 = typeFactory.createFcItfType("///interceptor-controller", "org.objectweb.fractal.koch.control.interceptor.InterceptorController", false, false, false);
InterfaceType IT11 = typeFactory.createFcItfType("//component", "org.objectweb.fractal.api.Component", true, false, false);
InterfaceType IT12 = typeFactory.createFcItfType("//binding-controller", "org.objectweb.fractal.api.control.BindingController", true, false, false);
InterfaceType IT13 = typeFactory.createFcItfType("//lifecycle-controller", "org.objectweb.fractal.julia.control.lifecycle.LifeCycleCoordinator", true, false, false);
InterfaceType IT14 = typeFactory.createFcItfType("attribute-controller", "org.objectweb.fractal.koch.control.interceptor.InterceptorDefAttributes", false, false, false);
ComponentType CT6 = typeFactory.createFcType(new InterfaceType [] { IT10, IT11, IT12, IT13, IT14 });
Component C6 = genericFactory.newFcInstance(CT6, "mPrimitive", "'interceptor-controller-impl");
try { Fractal.getNameController(C6).setFcName("IC"); } catch (NoSuchInterfaceException ignored) { }
((org.objectweb.fractal.koch.control.interceptor.InterceptorDefAttributes)Fractal.getAttributeController(C6)).setInterceptors("(org.objectweb.fractal.julia.asm.InterceptorClassGenerator org.objectweb.fractal.julia.asm.LifeCycleCodeGenerator)");
InterfaceType IT15 = typeFactory.createFcItfType("//component", "org.objectweb.fractal.api.Component", true, false, false);
InterfaceType IT16 = typeFactory.createFcItfType("//simulation-controller", "org.osadev.osa.simapis.simulation.EventSimulationControllerAPI", false, false, false);
InterfaceType IT17 = typeFactory.createFcItfType("//modeling-event-controller", "org.osadev.osa.simapis.modeling.EventModelingAPI", false, false, false);
ComponentType CT7 = typeFactory.createFcType(new InterfaceType [] { IT15, IT16, IT17 });
Component C7 = genericFactory.newFcInstance(CT7, "mPrimitive", "org.osadev.osa.engines.newdes.impl.llong.EventSimulationControllerImpl");
try { Fractal.getNameController(C7).setFcName("SimC"); } catch (NoSuchInterfaceException ignored) { }
InterfaceType IT18 = typeFactory.createFcItfType("//lifecycle-controller", "org.objectweb.fractal.julia.control.lifecycle.LifeCycleCoordinator", false, false, false);
InterfaceType IT19 = typeFactory.createFcItfType("//binding-controller", "org.objectweb.fractal.api.control.BindingController", false, false, false);
InterfaceType IT20 = typeFactory.createFcItfType("//component", "org.objectweb.fractal.api.Component", false, false, false);
InterfaceType IT21 = typeFactory.createFcItfType("//name-controller", "org.objectweb.fractal.api.control.NameController", false, false, false);
InterfaceType IT22 = typeFactory.createFcItfType("//super-controller", "org.objectweb.fractal.julia.control.content.SuperControllerNotifier", false, false, false);
InterfaceType IT23 = typeFactory.createFcItfType("///interceptor-controller", "org.objectweb.fractal.koch.control.interceptor.InterceptorController", false, false, false);
InterfaceType IT24 = typeFactory.createFcItfType("///membrane-controller", "org.objectweb.fractal.koch.control.membrane.MembraneController", false, false, false);
InterfaceType IT25 = typeFactory.createFcItfType("//simulation-controller", "org.osadev.osa.simapis.simulation.EventSimulationControllerAPI", false, false, false);
InterfaceType IT26 = typeFactory.createFcItfType("//modeling-event-controller", "org.osadev.osa.simapis.modeling.EventModelingAPI", false, false, false);
ComponentType CT8 = typeFactory.createFcType(new InterfaceType [] { IT18, IT19, IT20, IT21, IT22, IT23, IT24, IT25, IT26 });
Component C8 = genericFactory.newFcInstance(CT8, "mComposite", null);
try { Fractal.getNameController(C8).setFcName("org.osadev.osa.engines.newdes.membrane.SimBasicPrimitive"); } catch (NoSuchInterfaceException ignored) { }
Fractal.getContentController(C8).addFcSubComponent(C0);
Fractal.getContentController(C8).addFcSubComponent(C1);
Fractal.getContentController(C8).addFcSubComponent(C2);
Fractal.getContentController(C8).addFcSubComponent(C3);
Fractal.getContentController(C8).addFcSubComponent(C4);
Fractal.getContentController(C8).addFcSubComponent(C5);
Fractal.getContentController(C8).addFcSubComponent(C6);
Fractal.getContentController(C8).addFcSubComponent(C7);
Fractal.getBindingController(C8).bindFc("///membrane-controller", C0.getFcInterface("///membrane-controller"));
Fractal.getBindingController(C8).bindFc("//component", C1.getFcInterface("//component"));
Fractal.getBindingController(C8).bindFc("//name-controller", C2.getFcInterface("//name-controller"));
Fractal.getBindingController(C8).bindFc("//lifecycle-controller", C3.getFcInterface("//lifecycle-controller"));
Fractal.getBindingController(C8).bindFc("//binding-controller", C4.getFcInterface("//binding-controller"));
Fractal.getBindingController(C8).bindFc("//super-controller", C5.getFcInterface("//super-controller"));
Fractal.getBindingController(C8).bindFc("///interceptor-controller", C6.getFcInterface("///interceptor-controller"));
Fractal.getBindingController(C4).bindFc("//component", C1.getFcInterface("//component"));
Fractal.getBindingController(C4).bindFc("//super-controller", C5.getFcInterface("//super-controller"));
Fractal.getBindingController(C4).bindFc("//lifecycle-controller", C3.getFcInterface("//lifecycle-controller"));
Fractal.getBindingController(C3).bindFc("//component", C1.getFcInterface("//component"));
Fractal.getBindingController(C6).bindFc("//component", C1.getFcInterface("//component"));
Fractal.getBindingController(C6).bindFc("//lifecycle-controller", C3.getFcInterface("//lifecycle-controller"));
Fractal.getBindingController(C6).bindFc("//binding-controller", C4.getFcInterface("//binding-controller"));
Fractal.getBindingController(C7).bindFc("//component", C1.getFcInterface("//component"));
Fractal.getBindingController(C8).bindFc("//simulation-controller", C7.getFcInterface("//simulation-controller"));
Fractal.getBindingController(C8).bindFc("//modeling-event-controller", C7.getFcInterface("//modeling-event-controller"));
Fractal.getLifeCycleController(C3).startFc();
Fractal.getLifeCycleController(C4).startFc();
Fractal.getLifeCycleController(C6).startFc();
Fractal.getLifeCycleController(C7).startFc();
Fractal.getLifeCycleController(C8).startFc();
      // --------------------------------------------------
      return C8;
    }
    catch( Exception e ) {
      e.printStackTrace();
      throw new org.objectweb.fractal.api.factory.InstantiationException(e.getMessage());
    }
  }

  public org.objectweb.fractal.api.Type getFcInstanceType() {
    try {
      // --------------------------------------------------
InterfaceType IT27 = typeFactory.createFcItfType("//lifecycle-controller", "org.objectweb.fractal.julia.control.lifecycle.LifeCycleCoordinator", false, false, false);
InterfaceType IT28 = typeFactory.createFcItfType("//binding-controller", "org.objectweb.fractal.api.control.BindingController", false, false, false);
InterfaceType IT29 = typeFactory.createFcItfType("//component", "org.objectweb.fractal.api.Component", false, false, false);
InterfaceType IT30 = typeFactory.createFcItfType("//name-controller", "org.objectweb.fractal.api.control.NameController", false, false, false);
InterfaceType IT31 = typeFactory.createFcItfType("//super-controller", "org.objectweb.fractal.julia.control.content.SuperControllerNotifier", false, false, false);
InterfaceType IT32 = typeFactory.createFcItfType("///interceptor-controller", "org.objectweb.fractal.koch.control.interceptor.InterceptorController", false, false, false);
InterfaceType IT33 = typeFactory.createFcItfType("///membrane-controller", "org.objectweb.fractal.koch.control.membrane.MembraneController", false, false, false);
InterfaceType IT34 = typeFactory.createFcItfType("//simulation-controller", "org.osadev.osa.simapis.simulation.EventSimulationControllerAPI", false, false, false);
InterfaceType IT35 = typeFactory.createFcItfType("//modeling-event-controller", "org.osadev.osa.simapis.modeling.EventModelingAPI", false, false, false);
ComponentType CT9 = typeFactory.createFcType(new InterfaceType [] { IT27, IT28, IT29, IT30, IT31, IT32, IT33, IT34, IT35 });
      // --------------------------------------------------
      return CT9;
    }
    catch( Exception e ) {
      e.printStackTrace();
      throw new RuntimeException(e.getMessage());
    }
  }

  private org.objectweb.fractal.api.type.TypeFactory typeFactory;
  private org.objectweb.fractal.api.factory.GenericFactory genericFactory;

  public String[] listFc() {
    return new String[]{"type-factory","generic-factory"};
  }

  public void bindFc( String clientItfName, Object serverItf ) {
    if( clientItfName.equals("type-factory") ) {
      typeFactory = (org.objectweb.fractal.api.type.TypeFactory) serverItf;
    }
    if( clientItfName.equals("generic-factory") ) {
      genericFactory = (org.objectweb.fractal.api.factory.GenericFactory) serverItf;
    }
  }

  public Object lookupFc( String clientItfName ) {
    if( clientItfName.equals("type-factory") ) {
      return typeFactory;
    }
    if( clientItfName.equals("generic-factory") ) {
      return genericFactory;
    }
    return null;
  }

  public void unbindFc( String clientItfName ) {
    if( clientItfName.equals("type-factory") ) {
      typeFactory = null;
    }
    if( clientItfName.equals("generic-factory") ) {
      genericFactory = null;
    }
  }
}
